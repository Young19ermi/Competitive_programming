def bubble_sort(arr):
    n = len(arr)
    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n-i-1):
            # Traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# Merge Sort #
class Solution:
    def merge_sort(self, array):
        if len(array) > 1:
            left_array = array[0:len(array) // 2]
            right_array = array[len(array) // 2:len(array)]
            
            self.merge_sort(left_array)
            self.merge_sort(right_array)
            
            i = 0  # index of left array
            j = 0  # index of right array
            k = 0  # index of merge array
            
            while i < len(left_array) and j < len(right_array):
                if left_array[i] < right_array[j]:
                    array[k] = left_array[i]
                    i += 1
                else:
                    array[k] = right_array[j]
                    j += 1
                k += 1
            
            while i < len(left_array):
                array[k] = left_array[i]
                i += 1
                k += 1
            
            while j < len(right_array):
                array[k] = right_array[j]
                j += 1
                k += 1
        #The last two while loops handle the remaining elements.
        #These additional loops ensure that all the elements from both subarrays are included in the merged array, resulting in a fully sorted array."""
        return array


res = Solution()
array = [5, 3, 8, 0, 1, 7]
sorted_array = res.merge_sort(array)
print(sorted_array)
 
# Quick Sort
#describe the function of every single line of code specially the first five line of code
def quicksort(array, left, right):
    if left < right:
        partition_pos = partition(array,left, right)
        quicksort(array, left, partition_pos-1)
        quicksort(array, partition_pos+1, right)
def partition(array, left, right):
    i = left
    j = right - 1
    pivot = array[right]
    
    while i < j:
        while i < right and array[i] < array[pivot]:
            i+=1
        while j > left and array[j] > array[pivot]:
            j-=1
            #after the above while loop if the case stated below satisfied do the statement operation
        if i < j:#means if they didn't cross eachother
            array[i],array[j] = array[j],array[i]
    if array[i] > pivot and i > j: #If they cross the eachother
        array[i],array[right] = array[right],array[i]
    
    return i
    
    
    
        
    




