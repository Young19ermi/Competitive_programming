class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        subarraycount = defaultdict(int)
        total = 0
        for num in nums:
            count = 0
            total += num
            remainder = total % k
            subarraycount[remainder] += 1 # assign the occurence of the remainder in dict

        for key,value in subarraycount.items(): # [key:value --> 0:2 --> [key -remaninder] & [value-occurence]]
            if key == 0: #[0:2] if the modulus is zero it means it is divisible we just add it to the count
                count += value
                
            if value > 1: #The second if statement should be used whenever the value in the subarray_count dictionary is greater than 1, regardless of the key value.
                count += (value * (value - 1)) // 2 #the combination formula
        return count            


